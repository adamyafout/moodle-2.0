{"version":3,"sources":["../src/modalformhelper.js"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","TheForm","selector","init","prototype","modal","triggers","dd","on","e","preventDefault","modaldata","data","create","type","types","CANCEL","title","formtitle","body","getBody","then","getRoot","hidden","setBody","bind","show","loadFragment"],"mappings":"AASAA,OAAM,gDAAC,CAAC,QAAD,CAAW,UAAX,CAAsB,UAAtB,CAAkC,oBAAlC,CAAwD,mBAAxD,CAA6E,eAA7E,CAA8F,WAA9F,CAA2G,UAA3G,CAAD,CACF,SAASC,CAAT,CAAYC,CAAZ,CAAgBC,CAAhB,CAAqBC,CAArB,CAAmCC,CAAnC,CAAgDC,CAAhD,CAAmE,CAW/D,GAAIC,CAAAA,CAAO,CAAG,SAASC,CAAT,CAAmB,CAG7B,KAAKC,IAAL,CAAUD,CAAV,CAEH,CALD,CAWAD,CAAO,CAACG,SAAR,CAAkBC,KAAlB,CAA0B,IAA1B,CAUAJ,CAAO,CAACG,SAAR,CAAkBD,IAAlB,CAAyB,SAASD,CAAT,CAAmB,IACpCI,CAAAA,CAAQ,CAAGX,CAAC,CAACO,CAAD,CADwB,CAEpCK,CAAE,CAAC,IAFiC,CAIxCZ,CAAC,CAAC,MAAD,CAAD,CAAUa,EAAV,CAAa,OAAb,CAAqBN,CAArB,CAA8B,SAASO,CAAT,CAAY,CAEtCA,CAAC,CAACC,cAAF,GACAH,CAAE,CAACI,SAAH,CAAa,CAAC,UAAchB,CAAC,CAAC,IAAD,CAAD,CAAQiB,IAAR,CAAa,WAAb,CAAf,CACT,SAAYjB,CAAC,CAAC,IAAD,CAAD,CAAQiB,IAAR,CAAa,UAAb,CADH,CAET,UAAajB,CAAC,CAAC,IAAD,CAAD,CAAQiB,IAAR,CAAa,WAAb,CAFJ,CAGT,cAAiBjB,CAAC,CAAC,IAAD,CAAD,CAAQiB,IAAR,CAAa,eAAb,CAHR,CAIT,KAAQjB,CAAC,CAAC,IAAD,CAAD,CAAQiB,IAAR,CAAa,MAAb,CAJC,CAAb,CAQAd,CAAY,CAACe,MAAb,CAAoB,CAChBC,IAAI,CAAEhB,CAAY,CAACiB,KAAb,CAAmBC,MADT,CAEhBC,KAAK,CAAEV,CAAE,CAACW,SAFM,CAGhBC,IAAI,CAAEZ,CAAE,CAACa,OAAH,CAAWb,CAAE,CAACI,SAAd,CAHU,CAApB,EAIGU,IAJH,CAIQ,SAAUhB,CAAV,CAAiB,CAErBE,CAAE,CAACF,KAAH,CAAWA,CAAX,CAKAE,CAAE,CAACF,KAAH,CAASiB,OAAT,GAAmBd,EAAnB,CAAsBT,CAAW,CAACwB,MAAlC,CAA0C,UAAW,CACjDhB,CAAE,CAACF,KAAH,CAASmB,OAAT,CAAiBjB,CAAE,CAACa,OAAH,CAAWb,CAAE,CAACI,SAAd,CAAjB,CACH,CAFyC,CAExCc,IAFwC,CAEnClB,CAFmC,CAA1C,EAIAA,CAAE,CAACF,KAAH,CAASqB,IAAT,GACA,MAAOnB,CAAAA,CAAE,CAACF,KACb,CAjBD,CAmBH,CA9BD,CAgCH,CApCD,CA4CAJ,CAAO,CAACG,SAAR,CAAkBgB,OAAlB,CAA4B,SAAST,CAAT,CAAoB,CAI5C,MAAOX,CAAAA,CAAQ,CAAC2B,YAAT,CAAsB,8BAAtB,CAAsD,OAAtD,CAA+DhB,CAAS,UAAxE,CAAuFA,CAAvF,CAEV,CAND,CASA,MAAyE,CAWrER,IAAI,CAAE,cAASD,CAAT,CAAmB,CACrB,MAAO,IAAID,CAAAA,CAAJ,CAAYC,CAAZ,CACV,CAboE,CAe5E,CArGC,CAAN","sourcesContent":["/**\n * Add a modal to manage question adding and editing to the page.\n *\n * @module     assignsubmission_cloudpoodll/modalformhelper\n * @class      modalformhelper\n * @package    mod_poodlltime\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector) {\n\n            //this will init on item click (better for lots of items)\n            this.init(selector);\n\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.init = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n                dd.modaldata={'contextid':  $(this).data('contextid'),\n                    'mediaurl': $(this).data('mediaurl'),\n                    'mediatype': $(this).data('mediatype'),\n                    'transcripturl': $(this).data('transcripturl'),\n                    'lang': $(this).data('lang')\n                };\n\n\n                ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: dd.formtitle,\n                    body: dd.getBody(dd.modaldata)\n                }).then(function (modal) {\n                    // Keep a reference to the modal.\n                    dd.modal = modal;\n                   // dd.modal.setLarge();\n                   // dd.modal.setTitle('bananas');\n\n                    // We want to reset the form every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.hidden, function() {\n                        dd.modal.setBody(dd.getBody(dd.modaldata));\n                    }.bind(dd));\n\n                    dd.modal.show();\n                    return dd.modal;\n                });\n\n            });//end of on click\n\n        };\n\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.getBody = function(modaldata) {\n\n\n            // Get the content of the modal.\n            return Fragment.loadFragment('assignsubmission_cloudpoodll', 'mform', modaldata['contextid'], modaldata);\n\n        };\n\n\n        return /** @alias module:assignsubmission_cloudpoodll/modalformhelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {function} callback The callback.\n             * @return {Promise}\n             */\n            init: function(selector) {\n                return new TheForm(selector);\n            }\n        };\n    });"],"file":"modalformhelper.min.js"}